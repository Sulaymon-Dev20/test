{"ast":null,"code":"var _jsxFileName = \"/media/my-word-com/\\u041D\\u043E\\u0432\\u044B\\u0439 \\u0442\\u043E\\u043C/MYBUS.FRONTEND/MYBUS/src/views/test.js\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-multi-carousel/lib/styles.css\";\nimport \"../components/Other/style.css\";\nimport UAParser from \"ua-parser-js\";\nimport React, { Fragment } from \"react\";\nimport Simple from \"../components/Other/Simple\";\nimport WithScrollbar from \"../components/Other/WithScrollbar\";\nimport WithVideo from \"../components/Other/WithVideo\";\nimport Section from \"../components/Other/Section\"; // Because this is an inframe, so the SSR mode doesn't not do well here.\n// It will work on real devices.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Index = ({\n  deviceType\n}) => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      children: /*#__PURE__*/_jsxDEV(Simple, {\n        deviceType: deviceType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      children: /*#__PURE__*/_jsxDEV(WithScrollbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Index;\n\nIndex.getInitialProps = ({\n  req\n}) => {\n  let userAgent;\n\n  if (req) {\n    userAgent = req.headers[\"user-agent\"];\n  } else {\n    userAgent = navigator.userAgent;\n  }\n\n  const parser = new UAParser();\n  parser.setUA(userAgent);\n  const result = parser.getResult();\n  const deviceType = result.device && result.device.type || \"desktop\";\n  return {\n    deviceType\n  };\n};\n\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/media/my-word-com/Новый том/MYBUS.FRONTEND/MYBUS/src/views/test.js"],"names":["UAParser","React","Fragment","Simple","WithScrollbar","WithVideo","Section","Index","deviceType","getInitialProps","req","userAgent","headers","navigator","parser","setUA","result","getResult","device","type"],"mappings":";AAAA,OAAO,kCAAP;AACA,OAAO,qCAAP;AACA,OAAO,+BAAP;AACA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,OAAP,MAAoB,6BAApB,C,CAEA;AACA;;;;AACA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AAC9B,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,OAAD;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,UAAU,EAAEA;AAApB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII,QAAC,OAAD;AAAA,6BACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAXD;;KAAMD,K;;AAYNA,KAAK,CAACE,eAAN,GAAwB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AACjC,MAAIC,SAAJ;;AACA,MAAID,GAAJ,EAAS;AACLC,IAAAA,SAAS,GAAGD,GAAG,CAACE,OAAJ,CAAY,YAAZ,CAAZ;AACH,GAFD,MAEO;AACHD,IAAAA,SAAS,GAAGE,SAAS,CAACF,SAAtB;AACH;;AACD,QAAMG,MAAM,GAAG,IAAId,QAAJ,EAAf;AACAc,EAAAA,MAAM,CAACC,KAAP,CAAaJ,SAAb;AACA,QAAMK,MAAM,GAAGF,MAAM,CAACG,SAAP,EAAf;AACA,QAAMT,UAAU,GAAIQ,MAAM,CAACE,MAAP,IAAiBF,MAAM,CAACE,MAAP,CAAcC,IAAhC,IAAyC,SAA5D;AACA,SAAO;AAAEX,IAAAA;AAAF,GAAP;AACH,CAZD;;AAaA,eAAeD,KAAf","sourcesContent":["import \"semantic-ui-css/semantic.min.css\";\nimport \"react-multi-carousel/lib/styles.css\";\nimport \"../components/Other/style.css\";\nimport UAParser from \"ua-parser-js\";\nimport React, { Fragment } from \"react\";\nimport Simple from \"../components/Other/Simple\";\nimport WithScrollbar from \"../components/Other/WithScrollbar\";\nimport WithVideo from \"../components/Other/WithVideo\";\nimport Section from \"../components/Other/Section\";\n\n// Because this is an inframe, so the SSR mode doesn't not do well here.\n// It will work on real devices.\nconst Index = ({ deviceType }) => {\n    return (\n        <Fragment>\n            <Section>\n                <Simple deviceType={deviceType} />\n            </Section>\n            <Section>\n                <WithScrollbar />\n            </Section>\n        </Fragment>\n    );\n};\nIndex.getInitialProps = ({ req }) => {\n    let userAgent;\n    if (req) {\n        userAgent = req.headers[\"user-agent\"];\n    } else {\n        userAgent = navigator.userAgent;\n    }\n    const parser = new UAParser();\n    parser.setUA(userAgent);\n    const result = parser.getResult();\n    const deviceType = (result.device && result.device.type) || \"desktop\";\n    return { deviceType };\n};\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}